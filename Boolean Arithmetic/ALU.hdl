// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	
	//ZX Control
	Mux16(a=x ,b=false ,sel=zx , out=x1);
   
	//NX Control
	Not16(in=x1,out=Notx1);
	Mux16(a=x1 ,b=Notx1 ,sel=nx , out=x2);
   
	//ZY Control
	Mux16(a=y ,b=false ,sel=zy , out=y1);
   
    //NY Control
	Not16(in=y1,out=Noty1);
	Mux16(a=y1 ,b=Noty1 ,sel=ny , out=y2);
	
	//f Control
	Add16(a=x2,b=y2,out=XplusY);
	And16(a=x2,b=y2,out=XAndY );	
	Mux16(a=XAndY ,b=XplusY ,sel=f , out=outTemp);
	
	//"no" Control
	Not16(in=outTemp, out=NotOut);
	Mux16(a=outTemp, b=NotOut, sel=no, out[0..7]=outZR1, out[8..15]=outZR2, out[15]=outNG, out=out);
	
	// IF out == 0 then zr=1 else 0
	
	Or8Way(in=outZR1,out=outZR11);
	Or8Way(in=outZR2,out=outZR22);
	Or(a=outZR11,b=outZR22, out=out16way);
	
	// Or16Way(in=outZR,out=out16way);
	Mux(a=true , b=false, sel=out16way, out=zr );
	
	// IF out<0 then ng =1 else ng =0
	
	Mux(a=false , b=true, sel=outNG, out=ng );

}